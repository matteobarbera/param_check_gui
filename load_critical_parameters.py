import re
from typing import Dict, List


def read_critical_parameters() -> Dict[str, List[str]]:
    params = dict()
    try:
        with open(file_name, 'r') as f:
            list_begin_found = False
            for line in f:
                if not list_begin_found:
                    if re.search(r"#define PCHK_CRIT_PARAM_LIST", line):
                        list_begin_found = True
                else:  # So that the first element is not skipped
                    pattern = r"(?:.*{)(.*)(?:}.*)"
                    try:
                        match = re.match(pattern, line)[1].split(',')
                        match[0] = match[0][12:].strip("\") ")
                        params[match[0]] = match[1:]
                    except TypeError:
                        break
    except FileNotFoundError:
        pass
    return params


def write_critical_parameters(params: Dict[str, List[float]]):
    with open(file_name, 'w') as f:
        f.write("//=========================================================="
                "\n// THIS FILE WAS AUTO-GENERATED BY generate_param_list.py"
                "\n// Do not edit this file as incorrect format will crash PX4"
                "\n//==========================================================")
        f.write("\n\n#ifndef PX4_AVY_PARAMETER_CHECK_LIST_H"
                "\n#define PX4_AVY_PARAMETER_CHECK_LIST_H")

        f.write("\n\n#define PCHK_CRIT_PARAM_LIST \\")
        params_items = iter(params.items())
        first_name, first_value = next(params_items)
        for name, value in params_items:
            f.write("\n" + " " * 29 + f"paramInfo {{param_find(\"{name}\"), {', '.join(map(str, value))}}}, \\")
        else:
            f.write("\n" + " " * 29 + f"paramInfo {{param_find(\"{first_name}\"), {', '.join(map(str, first_value))}}}")
        f.write("\n\n#endif //PX4_AVY_PARAMETER_CHECK_LIST_H")


file_name = ".//avy_parameter_check_list.h"
if __name__ == "__main__":
    print(read_critical_parameters())
